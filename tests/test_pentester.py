
import unittest
import sys
import os
from unittest.mock import patch, MagicMock

# Add the parent directory to the path so we can import modules
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

class TestPentester(unittest.TestCase):
    """Test cases for the main pentester functionality"""
    
    def setUp(self):
        """Set up test fixtures"""
        self.test_target = "127.0.0.1"
        self.test_ports = "80,443"
    
    def test_target_validation(self):
        """Test target validation functionality"""
        from utils.validation import validate_target
        
        # Valid targets
        self.assertTrue(validate_target("192.168.1.1"))
        self.assertTrue(validate_target("example.com"))
        self.assertTrue(validate_target("192.168.1.0/24"))
        
        # Invalid targets
        self.assertFalse(validate_target("999.999.999.999"))
        self.assertFalse(validate_target(""))
        self.assertFalse(validate_target("invalid..domain"))
    
    def test_port_parsing(self):
        """Test port range parsing"""
        from utils.network_utils import parse_port_range
        
        # Single port
        self.assertEqual(parse_port_range("80"), [80])
        
        # Port range
        self.assertEqual(parse_port_range("80-85"), [80, 81, 82, 83, 84, 85])
        
        # Multiple ports
        self.assertEqual(parse_port_range("80,443,8080"), [80, 443, 8080])
        
        # Mixed format
        self.assertEqual(parse_port_range("80,443,8000-8002"), [80, 443, 8000, 8001, 8002])
    
    @patch('modules.network_scanner.nmap.PortScanner')
    def test_network_scanner_initialization(self, mock_nmap):
        """Test network scanner initialization"""
        from modules.network_scanner import NetworkScanner
        
        mock_scanner = MagicMock()
        mock_nmap.return_value = mock_scanner
        
        scanner = NetworkScanner()
        self.assertIsNotNone(scanner)
        mock_nmap.assert_called_once()
    
    def test_dns_enum_initialization(self):
        """Test DNS enumeration module initialization"""
        from modules.dns_enum import DNSEnum
        
        dns_enum = DNSEnum("example.com")
        self.assertEqual(dns_enum.domain, "example.com")
    
    def test_ssl_analyzer_initialization(self):
        """Test SSL analyzer initialization"""
        from modules.ssl_analyzer import SSLAnalyzer
        
        analyzer = SSLAnalyzer()
        self.assertIsNotNone(analyzer)
    
    def test_whois_lookup_initialization(self):
        """Test WHOIS lookup initialization"""
        from modules.whois_lookup import WHOISLookup
        
        whois = WHOISLookup()
        self.assertIsNotNone(whois)

if __name__ == '__main__':
    unittest.main()
