
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: infogather_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-flask black flake8 mypy bandit safety
    
    - name: Security scan with bandit
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . --severity-level medium
    
    - name: Dependency vulnerability scan
      run: |
        safety check --json --output safety-report.json || true
        safety check
    
    - name: Code formatting check
      run: |
        black --check .
    
    - name: Linting with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Type checking with mypy
      run: |
        mypy --ignore-missing-imports .
    
    - name: Run tests with coverage
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/infogather_test
        FLASK_ENV: testing
        SECRET_KEY: test-secret-key
      run: |
        pytest --cov=. --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Archive test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          bandit-report.json
          safety-report.json
          htmlcov/
          coverage.xml

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  deploy:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to Replit
      env:
        REPLIT_TOKEN: ${{ secrets.REPLIT_TOKEN }}
      run: |
        curl -X POST \
          -H "Authorization: Bearer $REPLIT_TOKEN" \
          -H "Content-Type: application/json" \
          -d '{"ref": "main"}' \
          https://api.replit.com/v1/repls/YOUR_REPL_ID/deployments
    
    - name: Health check after deployment
      run: |
        sleep 30
        curl -f https://YOUR_REPL_URL/health || exit 1
    
    - name: Notify deployment success
      if: success()
      run: |
        echo "✅ Deployment successful!"
    
    - name: Notify deployment failure
      if: failure()
      run: |
        echo "❌ Deployment failed!"
        exit 1

  release:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Generate changelog
      id: changelog
      run: |
        git log --oneline --since="1 week ago" > RECENT_CHANGES.md
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat RECENT_CHANGES.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v1.0.0-${{ github.run_number }}
        release_name: Release v1.0.0-${{ github.run_number }}
        body: |
          ## Changes
          ${{ steps.changelog.outputs.changelog }}
          
          ## Deployment
          - Deployed to production: https://YOUR_REPL_URL
          - Health check: https://YOUR_REPL_URL/health
        draft: false
        prerelease: false
