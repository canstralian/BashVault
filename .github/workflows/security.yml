name: Security Scanning

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 0' # Weekly on Sunday at 2 AM

jobs:
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety semgrep
        
    - name: Run Bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json
        bandit -r . -f txt
        
    - name: Run Safety dependency check
      run: |
        safety check --json --output safety-report.json
        safety check
        
    - name: Run Semgrep security scan
      run: |
        semgrep --config=auto . --json --output=semgrep-report.json
        semgrep --config=auto .
        
    - name: Upload security artifacts
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          semgrep-report.json
          
    - name: Comment PR with security findings
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          try {
            const banditReport = JSON.parse(fs.readFileSync('bandit-report.json', 'utf8'));
            const safetyReport = JSON.parse(fs.readFileSync('safety-report.json', 'utf8'));
            
            let comment = '## Security Scan Results\n\n';
            comment += `### Bandit Findings: ${banditReport.results.length}\n`;
            comment += `### Safety Vulnerabilities: ${safetyReport.vulnerabilities ? safetyReport.vulnerabilities.length : 0}\n`;
            
            if (banditReport.results.length > 0) {
              comment += '\n**High Priority Issues:**\n';
              banditReport.results.filter(r => r.issue_severity === 'HIGH').forEach(issue => {
                comment += `- ${issue.test_name}: ${issue.filename}:${issue.line_number}\n`;
              });
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            console.log('Error reading security reports:', error);
          }