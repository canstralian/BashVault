#!/usr/bin/env python3
"""
InfoGather - Penetration Testing Information Gathering Tool
A comprehensive Python-based tool for authorized security assessments

DISCLAIMER: This tool is intended for authorized security testing only.
Ensure you have explicit permission before scanning any networks or systems.
Unauthorized use may violate laws and regulations.
"""

import argparse
import sys
import json
import time
from concurrent.futures import ThreadPoolExecutor, as_completed
from modules.network_scanner import NetworkScanner
from modules.dns_enum import DNSEnumerator
from modules.whois_lookup import WhoisLookup
from modules.ssl_analyzer import SSLAnalyzer
from modules.vulnerability_scanner import VulnerabilityScanner
from modules.report_generator import ReportGenerator
from utils.validation import validate_target, validate_ports
from utils.network_utils import expand_cidr_range

def print_banner():
    """Display tool banner and ethical use warning"""
    banner = """
╔══════════════════════════════════════════════════════════════════╗
║                           InfoGather                             ║
║                 Penetration Testing Tool v1.0                   ║
║                                                                  ║
║  ⚠️  WARNING: FOR AUTHORIZED SECURITY TESTING ONLY ⚠️           ║
║                                                                  ║
║  Ensure you have explicit written permission before using       ║
║  this tool on any network or system you do not own.             ║
║  Unauthorized use may violate laws and regulations.              ║
╚══════════════════════════════════════════════════════════════════╝
    """
    print(banner)

def show_progress(current, total, task="Processing"):
    """Display progress indicator"""
    percent = (current / total) * 100
    bar_length = 50
    filled = int(bar_length * current / total)
    bar = '█' * filled + '░' * (bar_length - filled)
    print(f"\r{task}: |{bar}| {percent:.1f}% ({current}/{total})", end='', flush=True)

def main():
    parser = argparse.ArgumentParser(
        description="InfoGather - Penetration Testing Information Gathering Tool",
        epilog="Example: python pentester.py -t 192.168.1.0/24 -p 1-1000 --all-modules"
    )
    
    # Target specification
    parser.add_argument('-t', '--target', required=True,
                       help='Target IP, hostname, or CIDR range (e.g., 192.168.1.1 or 192.168.1.0/24)')
    
    # Scan options
    parser.add_argument('-p', '--ports', default='1-1000',
                       help='Port range to scan (e.g., 1-1000, 80,443,8080)')
    parser.add_argument('--timing', choices=['T1', 'T2', 'T3', 'T4', 'T5'], default='T3',
                       help='Scan timing template (T1=slowest, T5=fastest)')
    parser.add_argument('--threads', type=int, default=50,
                       help='Number of threads for parallel processing')
    
    # Module selection
    parser.add_argument('--network-scan', action='store_true',
                       help='Perform network discovery and port scanning')
    parser.add_argument('--dns-enum', action='store_true',
                       help='Perform DNS enumeration and subdomain discovery')
    parser.add_argument('--whois', action='store_true',
                       help='Perform WHOIS lookup')
    parser.add_argument('--ssl-analysis', action='store_true',
                       help='Analyze SSL certificates')
    parser.add_argument('--vuln-scan', action='store_true',
                       help='Perform basic vulnerability scanning')
    parser.add_argument('--all-modules', action='store_true',
                       help='Run all available modules')
    
    # Output options
    parser.add_argument('-o', '--output', help='Output file prefix')
    parser.add_argument('--format', choices=['text', 'json', 'html'], default='text',
                       help='Output format')
    parser.add_argument('-v', '--verbose', action='store_true',
                       help='Enable verbose output')
    
    args = parser.parse_args()
    
    # Display banner and warning
    print_banner()
    
    # Validate target
    if not validate_target(args.target):
        print(f"[ERROR] Invalid target format: {args.target}")
        sys.exit(1)
    
    # Validate ports
    if not validate_ports(args.ports):
        print(f"[ERROR] Invalid port specification: {args.ports}")
        sys.exit(1)
    
    # Enable all modules if requested
    if args.all_modules:
        args.network_scan = True
        args.dns_enum = True
        args.whois = True
        args.ssl_analysis = True
        args.vuln_scan = True
    
    # Check if at least one module is selected
    if not any([args.network_scan, args.dns_enum, args.whois, args.ssl_analysis, args.vuln_scan]):
        print("[ERROR] No modules selected. Use --all-modules or specify individual modules.")
        sys.exit(1)
    
    # Expand target range if CIDR
    targets = expand_cidr_range(args.target) if '/' in args.target else [args.target]
    
    print(f"\n[INFO] Starting information gathering on {len(targets)} target(s)")
    print(f"[INFO] Modules enabled: {', '.join([m for m, enabled in [
        ('Network Scan', args.network_scan),
        ('DNS Enum', args.dns_enum),
        ('WHOIS', args.whois),
        ('SSL Analysis', args.ssl_analysis),
        ('Vuln Scan', args.vuln_scan)
    ] if enabled])}")
    
    # Initialize results storage
    all_results = {
        'targets': targets,
        'scan_time': time.strftime('%Y-%m-%d %H:%M:%S'),
        'results': {}
    }
    
    # Process each target
    for i, target in enumerate(targets):
        print(f"\n[INFO] Processing target {i+1}/{len(targets)}: {target}")
        target_results = {'target': target}
        
        try:
            # Network scanning
            if args.network_scan:
                print(f"[INFO] Running network scan on {target}")
                scanner = NetworkScanner(timing=args.timing, verbose=args.verbose)
                network_results = scanner.scan_target(target, args.ports)
                target_results['network_scan'] = network_results
            
            # DNS enumeration
            if args.dns_enum:
                print(f"[INFO] Running DNS enumeration on {target}")
                dns_enum = DNSEnumerator(verbose=args.verbose)
                dns_results = dns_enum.enumerate(target)
                target_results['dns_enum'] = dns_results
            
            # WHOIS lookup
            if args.whois:
                print(f"[INFO] Running WHOIS lookup on {target}")
                whois_lookup = WhoisLookup(verbose=args.verbose)
                whois_results = whois_lookup.lookup(target)
                target_results['whois'] = whois_results
            
            # SSL analysis
            if args.ssl_analysis:
                print(f"[INFO] Running SSL analysis on {target}")
                ssl_analyzer = SSLAnalyzer(verbose=args.verbose)
                ssl_results = ssl_analyzer.analyze(target)
                target_results['ssl_analysis'] = ssl_results
            
            # Vulnerability scanning
            if args.vuln_scan:
                print(f"[INFO] Running vulnerability scan on {target}")
                vuln_scanner = VulnerabilityScanner(verbose=args.verbose)
                vuln_results = vuln_scanner.scan(target, args.ports)
                target_results['vuln_scan'] = vuln_results
                
        except Exception as e:
            print(f"[ERROR] Error processing target {target}: {str(e)}")
            target_results['error'] = str(e)
        
        all_results['results'][target] = target_results
        show_progress(i+1, len(targets), "Targets processed")
    
    print("\n\n[INFO] Generating reports...")
    
    # Generate reports
    report_gen = ReportGenerator()
    
    if args.output:
        if args.format == 'json':
            report_gen.generate_json_report(all_results, f"{args.output}.json")
        elif args.format == 'html':
            report_gen.generate_html_report(all_results, f"{args.output}.html")
        else:
            report_gen.generate_text_report(all_results, f"{args.output}.txt")
        print(f"[INFO] Report saved to {args.output}.{args.format}")
    else:
        # Display text report to console
        report_gen.display_console_report(all_results)
    
    print("\n[INFO] Information gathering completed successfully!")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n[INFO] Scan interrupted by user")
        sys.exit(0)
    except Exception as e:
        print(f"\n[ERROR] Unexpected error: {str(e)}")
        sys.exit(1)
